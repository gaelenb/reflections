When you initialize a repo it adds the meta data files to the target folder.

It also makes the target folder the master copy.

It is needed to save the metadata:
	commit history

How is the staging area different from the working directory and repository? 
What value does it offer?

	The staging area is where you put files or folders that you want in a single
commit.

	This differs from the working directory because it is simply local storage
of files you don't want to track or commit. 


	It also differs from the repository:
the repo holds all the files that you have committed and all of the 
	changes made to them
	
 
	The staging area adds a filter for only tracking changes and committing 
the files that you that you add to it.
	Thus you can choose what is part of a commit

How can you use the staging area to make sure you have one commit per logical change?

	By only adding the files that you want committed.
	You can also keep track of which files you’ve changed which should only be those that logically relate to a single 	commit.
	Also, by having the original file in the repository you can compare the changes you’ve made and determine if they all belong in a single commit. 


When might you want to use branches to keep the commit history organized? How would it help?

	When you are making significant changes to the repo
	Really I’m not sure.
	Collaboration to allow people to work on separate features 

How do diagrams help visualize branch structure?

	They’re a less abstract representation of what is going on when you create a branch
	They help you see the commits that a branch is missing. 
		Branch A is missing all of the commits up to the tip AND when B branches off
		The master is missing the commit from A from a long time ago A LOT HAS CHANGED(maybe)! 
		Branch B is missing everything up to the tip after it branched + what the master is missing from A 
	So what happens when there’s a bug that was added before A branched? 

        /A	
— — — —/— — — — — —\— — — —Tip of the master
	             \B


What is the result of merging 2 branches together? Why represent it in the diagram the way we do?

	Merging 2 branches together creates a new commit 
		This new commit contains all of both branches’ commits and their ore



What are the pros and cons of Git’s automatic merging vs merging manually?

	Time. Holy shit. Time.
	
